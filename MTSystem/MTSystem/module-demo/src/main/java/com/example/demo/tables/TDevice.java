/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Li;
import com.example.demo.tables.records.TDeviceRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDevice extends TableImpl<TDeviceRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>li.t_device</code>
     */
    public static final TDevice T_DEVICE = new TDevice();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TDeviceRecord> getRecordType() {
        return TDeviceRecord.class;
    }

    /**
     * The column <code>li.t_device.dev_id</code>.
     */
    public final TableField<TDeviceRecord, Integer> DEV_ID = createField(DSL.name("dev_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>li.t_device.dev_name</code>.
     */
    public final TableField<TDeviceRecord, String> DEV_NAME = createField(DSL.name("dev_name"), SQLDataType.VARCHAR(32), this, "");

    private TDevice(Name alias, Table<TDeviceRecord> aliased) {
        this(alias, aliased, null);
    }

    private TDevice(Name alias, Table<TDeviceRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>li.t_device</code> table reference
     */
    public TDevice(String alias) {
        this(DSL.name(alias), T_DEVICE);
    }

    /**
     * Create an aliased <code>li.t_device</code> table reference
     */
    public TDevice(Name alias) {
        this(alias, T_DEVICE);
    }

    /**
     * Create a <code>li.t_device</code> table reference
     */
    public TDevice() {
        this(DSL.name("t_device"), null);
    }

    public <O extends Record> TDevice(Table<O> child, ForeignKey<O, TDeviceRecord> key) {
        super(child, key, T_DEVICE);
    }

    @Override
    public Schema getSchema() {
        return Li.LI;
    }

    @Override
    public Identity<TDeviceRecord, Integer> getIdentity() {
        return (Identity<TDeviceRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TDeviceRecord> getPrimaryKey() {
        return Keys.KEY_T_DEVICE_PRIMARY;
    }

    @Override
    public List<UniqueKey<TDeviceRecord>> getKeys() {
        return Arrays.<UniqueKey<TDeviceRecord>>asList(Keys.KEY_T_DEVICE_PRIMARY);
    }

    @Override
    public TDevice as(String alias) {
        return new TDevice(DSL.name(alias), this);
    }

    @Override
    public TDevice as(Name alias) {
        return new TDevice(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TDevice rename(String name) {
        return new TDevice(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TDevice rename(Name name) {
        return new TDevice(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
