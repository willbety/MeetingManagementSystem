/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Li;
import com.example.demo.tables.records.TDepUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDepUser extends TableImpl<TDepUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>li.t_dep_user</code>
     */
    public static final TDepUser T_DEP_USER = new TDepUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TDepUserRecord> getRecordType() {
        return TDepUserRecord.class;
    }

    /**
     * The column <code>li.t_dep_user.id</code>.
     */
    public final TableField<TDepUserRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>li.t_dep_user.dep_id</code>.
     */
    public final TableField<TDepUserRecord, Integer> DEP_ID = createField(DSL.name("dep_id"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>li.t_dep_user.user_id</code>.
     */
    public final TableField<TDepUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER, this, "");

    private TDepUser(Name alias, Table<TDepUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TDepUser(Name alias, Table<TDepUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>li.t_dep_user</code> table reference
     */
    public TDepUser(String alias) {
        this(DSL.name(alias), T_DEP_USER);
    }

    /**
     * Create an aliased <code>li.t_dep_user</code> table reference
     */
    public TDepUser(Name alias) {
        this(alias, T_DEP_USER);
    }

    /**
     * Create a <code>li.t_dep_user</code> table reference
     */
    public TDepUser() {
        this(DSL.name("t_dep_user"), null);
    }

    public <O extends Record> TDepUser(Table<O> child, ForeignKey<O, TDepUserRecord> key) {
        super(child, key, T_DEP_USER);
    }

    @Override
    public Schema getSchema() {
        return Li.LI;
    }

    @Override
    public Identity<TDepUserRecord, Integer> getIdentity() {
        return (Identity<TDepUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TDepUserRecord> getPrimaryKey() {
        return Keys.KEY_T_DEP_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TDepUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TDepUserRecord>>asList(Keys.KEY_T_DEP_USER_PRIMARY);
    }

    @Override
    public TDepUser as(String alias) {
        return new TDepUser(DSL.name(alias), this);
    }

    @Override
    public TDepUser as(Name alias) {
        return new TDepUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TDepUser rename(String name) {
        return new TDepUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TDepUser rename(Name name) {
        return new TDepUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
