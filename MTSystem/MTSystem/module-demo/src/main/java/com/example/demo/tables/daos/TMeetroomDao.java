/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables.daos;


import com.example.demo.tables.TMeetroom;
import com.example.demo.tables.records.TMeetroomRecord;

import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class TMeetroomDao extends DAOImpl<TMeetroomRecord, com.example.demo.tables.pojos.TMeetroom, Integer> {

    /**
     * Create a new TMeetroomDao without any configuration
     */
    public TMeetroomDao() {
        super(TMeetroom.T_MEETROOM, com.example.demo.tables.pojos.TMeetroom.class);
    }

    /**
     * Create a new TMeetroomDao with an attached configuration
     */
    @Autowired
    public TMeetroomDao(Configuration configuration) {
        super(TMeetroom.T_MEETROOM, com.example.demo.tables.pojos.TMeetroom.class, configuration);
    }

    @Override
    public Integer getId(com.example.demo.tables.pojos.TMeetroom object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TMeetroom.T_MEETROOM.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchById(Integer... values) {
        return fetch(TMeetroom.T_MEETROOM.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.example.demo.tables.pojos.TMeetroom fetchOneById(Integer value) {
        return fetchOne(TMeetroom.T_MEETROOM.ID, value);
    }

    /**
     * Fetch records that have <code>room_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchRangeOfRoomName(String lowerInclusive, String upperInclusive) {
        return fetchRange(TMeetroom.T_MEETROOM.ROOM_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>room_name IN (values)</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchByRoomName(String... values) {
        return fetch(TMeetroom.T_MEETROOM.ROOM_NAME, values);
    }

    /**
     * Fetch records that have <code>root_size BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchRangeOfRootSize(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(TMeetroom.T_MEETROOM.ROOT_SIZE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>root_size IN (values)</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchByRootSize(Integer... values) {
        return fetch(TMeetroom.T_MEETROOM.ROOT_SIZE, values);
    }

    /**
     * Fetch records that have <code>room_state BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchRangeOfRoomState(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(TMeetroom.T_MEETROOM.ROOM_STATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>room_state IN (values)</code>
     */
    public List<com.example.demo.tables.pojos.TMeetroom> fetchByRoomState(Boolean... values) {
        return fetch(TMeetroom.T_MEETROOM.ROOM_STATE, values);
    }
}
