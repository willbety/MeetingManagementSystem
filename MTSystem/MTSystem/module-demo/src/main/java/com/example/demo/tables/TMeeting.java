/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Li;
import com.example.demo.tables.records.TMeetingRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TMeeting extends TableImpl<TMeetingRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>li.t_meeting</code>
     */
    public static final TMeeting T_MEETING = new TMeeting();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TMeetingRecord> getRecordType() {
        return TMeetingRecord.class;
    }

    /**
     * The column <code>li.t_meeting.id</code>.
     */
    public final TableField<TMeetingRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>li.t_meeting.meet_name</code>.
     */
    public final TableField<TMeetingRecord, String> MEET_NAME = createField(DSL.name("meet_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_meeting.meet_due</code>.
     */
    public final TableField<TMeetingRecord, String> MEET_DUE = createField(DSL.name("meet_due"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_meeting.meetroom_name</code>.
     */
    public final TableField<TMeetingRecord, String> MEETROOM_NAME = createField(DSL.name("meetroom_name"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_meeting.meet_dev</code>.
     */
    public final TableField<TMeetingRecord, String> MEET_DEV = createField(DSL.name("meet_dev"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_meeting.meet_start</code>.
     */
    public final TableField<TMeetingRecord, LocalDateTime> MEET_START = createField(DSL.name("meet_start"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>li.t_meeting.meet_end</code>.
     */
    public final TableField<TMeetingRecord, LocalDateTime> MEET_END = createField(DSL.name("meet_end"), SQLDataType.LOCALDATETIME(0), this, "");

    private TMeeting(Name alias, Table<TMeetingRecord> aliased) {
        this(alias, aliased, null);
    }

    private TMeeting(Name alias, Table<TMeetingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>li.t_meeting</code> table reference
     */
    public TMeeting(String alias) {
        this(DSL.name(alias), T_MEETING);
    }

    /**
     * Create an aliased <code>li.t_meeting</code> table reference
     */
    public TMeeting(Name alias) {
        this(alias, T_MEETING);
    }

    /**
     * Create a <code>li.t_meeting</code> table reference
     */
    public TMeeting() {
        this(DSL.name("t_meeting"), null);
    }

    public <O extends Record> TMeeting(Table<O> child, ForeignKey<O, TMeetingRecord> key) {
        super(child, key, T_MEETING);
    }

    @Override
    public Schema getSchema() {
        return Li.LI;
    }

    @Override
    public Identity<TMeetingRecord, Integer> getIdentity() {
        return (Identity<TMeetingRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TMeetingRecord> getPrimaryKey() {
        return Keys.KEY_T_MEETING_PRIMARY;
    }

    @Override
    public List<UniqueKey<TMeetingRecord>> getKeys() {
        return Arrays.<UniqueKey<TMeetingRecord>>asList(Keys.KEY_T_MEETING_PRIMARY);
    }

    @Override
    public TMeeting as(String alias) {
        return new TMeeting(DSL.name(alias), this);
    }

    @Override
    public TMeeting as(Name alias) {
        return new TMeeting(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TMeeting rename(String name) {
        return new TMeeting(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TMeeting rename(Name name) {
        return new TMeeting(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
