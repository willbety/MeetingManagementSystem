/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables.records;


import com.example.demo.tables.TDepment;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TDepmentRecord extends UpdatableRecordImpl<TDepmentRecord> implements Record3<Integer, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>li.t_depment.dep_id</code>.
     */
    public TDepmentRecord setDepId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>li.t_depment.dep_id</code>.
     */
    public Integer getDepId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>li.t_depment.dep_name</code>.
     */
    public TDepmentRecord setDepName(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>li.t_depment.dep_name</code>.
     */
    public String getDepName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>li.t_depment.dep_count</code>.
     */
    public TDepmentRecord setDepCount(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>li.t_depment.dep_count</code>.
     */
    public Integer getDepCount() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return TDepment.T_DEPMENT.DEP_ID;
    }

    @Override
    public Field<String> field2() {
        return TDepment.T_DEPMENT.DEP_NAME;
    }

    @Override
    public Field<Integer> field3() {
        return TDepment.T_DEPMENT.DEP_COUNT;
    }

    @Override
    public Integer component1() {
        return getDepId();
    }

    @Override
    public String component2() {
        return getDepName();
    }

    @Override
    public Integer component3() {
        return getDepCount();
    }

    @Override
    public Integer value1() {
        return getDepId();
    }

    @Override
    public String value2() {
        return getDepName();
    }

    @Override
    public Integer value3() {
        return getDepCount();
    }

    @Override
    public TDepmentRecord value1(Integer value) {
        setDepId(value);
        return this;
    }

    @Override
    public TDepmentRecord value2(String value) {
        setDepName(value);
        return this;
    }

    @Override
    public TDepmentRecord value3(Integer value) {
        setDepCount(value);
        return this;
    }

    @Override
    public TDepmentRecord values(Integer value1, String value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TDepmentRecord
     */
    public TDepmentRecord() {
        super(TDepment.T_DEPMENT);
    }

    /**
     * Create a detached, initialised TDepmentRecord
     */
    public TDepmentRecord(Integer depId, String depName, Integer depCount) {
        super(TDepment.T_DEPMENT);

        setDepId(depId);
        setDepName(depName);
        setDepCount(depCount);
    }
}
