/*
 * This file is generated by jOOQ.
 */
package com.example.demo.tables;


import com.example.demo.Keys;
import com.example.demo.Li;
import com.example.demo.tables.records.TUserRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TUser extends TableImpl<TUserRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>li.t_user</code>
     */
    public static final TUser T_USER = new TUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TUserRecord> getRecordType() {
        return TUserRecord.class;
    }

    /**
     * The column <code>li.t_user.user_id</code>.
     */
    public final TableField<TUserRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>li.t_user.user_name</code>.
     */
    public final TableField<TUserRecord, String> USER_NAME = createField(DSL.name("user_name"), SQLDataType.VARCHAR(20), this, "");

    /**
     * The column <code>li.t_user.user_password</code>.
     */
    public final TableField<TUserRecord, String> USER_PASSWORD = createField(DSL.name("user_password"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_user.user_age</code>.
     */
    public final TableField<TUserRecord, Integer> USER_AGE = createField(DSL.name("user_age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>li.t_user.user_sex</code>.
     */
    public final TableField<TUserRecord, Boolean> USER_SEX = createField(DSL.name("user_sex"), SQLDataType.BIT, this, "");

    /**
     * The column <code>li.t_user.user_phone</code>.
     */
    public final TableField<TUserRecord, String> USER_PHONE = createField(DSL.name("user_phone"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_user.user_email</code>.
     */
    public final TableField<TUserRecord, String> USER_EMAIL = createField(DSL.name("user_email"), SQLDataType.VARCHAR(32), this, "");

    /**
     * The column <code>li.t_user.user_role</code>.
     */
    public final TableField<TUserRecord, String> USER_ROLE = createField(DSL.name("user_role"), SQLDataType.VARCHAR(32), this, "");

    private TUser(Name alias, Table<TUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private TUser(Name alias, Table<TUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>li.t_user</code> table reference
     */
    public TUser(String alias) {
        this(DSL.name(alias), T_USER);
    }

    /**
     * Create an aliased <code>li.t_user</code> table reference
     */
    public TUser(Name alias) {
        this(alias, T_USER);
    }

    /**
     * Create a <code>li.t_user</code> table reference
     */
    public TUser() {
        this(DSL.name("t_user"), null);
    }

    public <O extends Record> TUser(Table<O> child, ForeignKey<O, TUserRecord> key) {
        super(child, key, T_USER);
    }

    @Override
    public Schema getSchema() {
        return Li.LI;
    }

    @Override
    public Identity<TUserRecord, Integer> getIdentity() {
        return (Identity<TUserRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<TUserRecord> getPrimaryKey() {
        return Keys.KEY_T_USER_PRIMARY;
    }

    @Override
    public List<UniqueKey<TUserRecord>> getKeys() {
        return Arrays.<UniqueKey<TUserRecord>>asList(Keys.KEY_T_USER_PRIMARY);
    }

    @Override
    public TUser as(String alias) {
        return new TUser(DSL.name(alias), this);
    }

    @Override
    public TUser as(Name alias) {
        return new TUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TUser rename(String name) {
        return new TUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TUser rename(Name name) {
        return new TUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, Integer, Boolean, String, String, String> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
